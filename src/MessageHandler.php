<?php

namespace thanatos\wechat;

use Yii;
use EasyWeChat\Kernel\Contracts\EventHandlerInterface;
use EasyWeChat\Kernel\Messages\Text;
use yii\base\Component;

/**
 * Class EventMessageHandler
 *
 * @property $toUserName string
 * @property $fromUserName string
 * @property $createTime string
 * @property $msgType string
 * @property $content string
 * @property $msgId string
 * @property $mediaId string
 * @property $format string
 * @property $recognition string
 * @property $thumbMediaId string
 * @property $location_x string
 * @property $location_y string
 * @property $scale string
 * @property $label string
 * @property $title string
 * @property $description string
 * @property $url string
 * @property $event string
 * @property $eventKey string
 * @property $ticket string
 * @property $latitude string
 * @property $longitude string
 * @property $precision string
 * @property WechatInfo $wechatInfo
 *
 * @package api\models\wechat
 */
abstract class MessageHandler extends Component implements EventHandlerInterface
{
    /** @var \EasyWeChat\Payment\Application|\EasyWeChat\OfficialAccount\Application|\EasyWeChat\MiniProgram\Application|\EasyWeChat\OpenPlatform\Application|\EasyWeChat\Work\Application */
    public $app;

    protected $_attributes = [
        'toUserName' => '',
        'fromUserName' => '',
        'createTime' => '',
        'msgType' => '',
        'content' => '',
        'msgId' => '',
        'picUrl' => '',
        'mediaId' => '',
        'format' => '',
        'recognition' => '',
        'thumbMediaId' => '',
        'location_x' => '',
        'location_y' => '',
        'scale' => '',
        'label' => '',
        'title' => '',
        'description' => '',
        'url' => '',
        'event' => '',
        'eventKey' => '',
        'ticket' => '',
        'latitude' => '',
        'longitude' => '',
        'precision' => '',

    ];

    /** @var WechatInfo */
    private $_wechatInfo;

    public function __construct($app)
    {
        $this->app = $app;
        parent::__construct([]);
    }

    /**
     * 开始处理前进行一些初始化数据
     * return false 不继续执行
     * @return bool
     */
    public function beforeHandle()
    {
        return true;
    }

    /**
     * 事件类型处理
     * subscribe 事件对应 eventSubscribe 方法
     * @param null $payload
     */
    public function handle($payload = null)
    {
        $array = json_decode(json_encode($payload), true);
        $this->setAttributes($array);

        if (method_exists($this, 'beforeHandle')) {
            if (!$this->beforeHandle()) {
                return '';
            }
        }

        // 添加自定义处理方法
        if ($this->event) {
            $method = 'event' . ucfirst(strtolower($this->event));
            if (method_exists($this, $method)) {
                return $this->$method();
            }
        }

        return $this->handleDefault();

    }

    abstract public function handleDefault();

    /**
     * 返回微信用户信息
     * @return WechatUser
     */
    public function getWechatInfo()
    {
        if ($this->_wechatInfo === null) {
            $user = $this->app->user->get($this->fromUserName);
            $config = json_decode(json_encode($user), true);
            $model = new WechatInfo();
            $model->setAttributes($config);
            $this->_wechatInfo = $model;
        }
        return $this->_wechatInfo;
    }

    public function setAttributes($params = [])
    {
        if ($params != null && is_array($params)) {
            foreach ($params as $k => $item) {
                $key = '';
                if (strpos('_', $k)) {
                    $key = strtolower($k);
                } else {
                    $key = lcfirst($k);
                }
                if (isset($this->_attributes[$key])) {
                    $this->_attributes[$key] = $item;
                }
            }
        }
    }

    public function hasAttribute($name)
    {
        return isset($this->_attributes[$name]);
    }

    public function __get($name)
    {
        if (isset($this->_attributes[$name]) || array_key_exists($name, $this->_attributes)) {
            return $this->_attributes[$name];
        }
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        if ($this->hasAttribute($name)) {
            $this->_attributes[$name] = $value;
        } else {
            parent::__set($name, $value);
        }
        return parent::__set($name, $value); // TODO: Change the autogenerated stub
    }



}